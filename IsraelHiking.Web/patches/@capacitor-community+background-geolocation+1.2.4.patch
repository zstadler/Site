diff --git a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java
index b6f2820..a398f70 100644
--- a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java
+++ b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java
@@ -137,7 +137,8 @@ public class BackgroundGeolocation extends Plugin {
         service.addWatcher(
                 call.getCallbackId(),
                 backgroundNotification,
-                call.getFloat("distanceFilter", 0f)
+                call.getFloat("distanceFilter", 0f),
+                call.getString("file", null)
         );
     }
 
diff --git a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java
index acf566c..8e1b63f 100644
--- a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java
+++ b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java
@@ -5,8 +5,10 @@ import android.app.Service;
 import android.content.Intent;
 import android.location.Location;
 import android.os.Binder;
+import android.os.Build;
 import android.os.IBinder;
 
+import com.getcapacitor.JSObject;
 import com.getcapacitor.Logger;
 import com.getcapacitor.android.BuildConfig;
 import com.google.android.gms.location.FusedLocationProviderClient;
@@ -17,9 +19,15 @@ import com.google.android.gms.location.LocationResult;
 import com.google.android.gms.location.LocationServices;
 
 import java.util.HashSet;
+import java.util.logging.FileHandler;
+import java.util.logging.Level;
+import java.util.logging.LogRecord;
+import java.util.logging.SimpleFormatter;
 
 import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 
+import org.json.JSONObject;
+
 // A bound and started service that is promoted to a foreground service when
 // location updates have been requested and the main activity is stopped.
 //
@@ -42,6 +50,20 @@ public class BackgroundGeolocationService extends Service {
         return binder;
     }
 
+    // Some devices allow a foreground service to outlive the application's main
+    // activity, leading to nasty crashes as reported in issue #59. If we learn
+    // that the application has been killed, all watchers are stopped and the
+    // service is terminated immediately.
+    @Override
+    public boolean onUnbind(Intent intent) {
+        for (Watcher watcher : watchers) {
+            watcher.client.removeLocationUpdates(watcher.locationCallback);
+            watchers.remove(watcher);
+        }
+        stopSelf();
+        return false;
+    }
+
     private class Watcher {
         public String id;
         public FusedLocationProviderClient client;
@@ -65,7 +87,8 @@ public class BackgroundGeolocationService extends Service {
         void addWatcher(
                 final String id,
                 Notification backgroundNotification,
-                float distanceFilter
+                float distanceFilter,
+                String filePath
         ) {
             FusedLocationProviderClient client = LocationServices.getFusedLocationProviderClient(
                     BackgroundGeolocationService.this
@@ -80,6 +103,7 @@ public class BackgroundGeolocationService extends Service {
                 @Override
                 public void onLocationResult(LocationResult locationResult) {
                     Location location = locationResult.getLastLocation();
+                    logLocationToFile(filePath, location);
                     Intent intent = new Intent(ACTION_BROADCAST);
                     intent.putExtra("location", location);
                     intent.putExtra("id", id);
@@ -103,11 +127,16 @@ public class BackgroundGeolocationService extends Service {
             watcher.backgroundNotification = backgroundNotification;
             watchers.add(watcher);
 
-            watcher.client.requestLocationUpdates(
-                    watcher.locationRequest,
-                    watcher.locationCallback,
-                    null
-            );
+            // According to Android Studio, this method can throw a Security Exception if
+            // permissions are not yet granted. Rather than check the permissions, which is fiddly,
+            // we simply ignore the exception.
+            try {
+                watcher.client.requestLocationUpdates(
+                        watcher.locationRequest,
+                        watcher.locationCallback,
+                        null
+                );
+            } catch (SecurityException ignore) {}
         }
 
         void removeWatcher(String id) {
@@ -151,4 +180,44 @@ public class BackgroundGeolocationService extends Service {
             BackgroundGeolocationService.this.stopSelf();
         }
     }
+
+    void logLocationToFile(String filePath, Location location) {
+        if (filePath == null || filePath.length() == 0) {
+            return;
+        }
+        FileHandler fileHandler = null;
+        try {
+            fileHandler = new FileHandler(filePath.replace("file://", ""), 1024*1024, 1, true);
+            fileHandler.setFormatter(new SimpleFormatter());
+            fileHandler.publish(new LogRecord(Level.INFO, formatLocation(location).toString()));
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            if (fileHandler != null)
+                fileHandler.close();
+        }
+    }
+
+    public static JSObject formatLocation(Location location) {
+        JSObject obj = new JSObject();
+        obj.put("latitude", location.getLatitude());
+        obj.put("longitude", location.getLongitude());
+        // The docs state that all Location objects have an accuracy, but then why is there a
+        // hasAccuracy method? Better safe than sorry.
+        obj.put("accuracy", location.hasAccuracy() ? location.getAccuracy() : JSONObject.NULL);
+        obj.put("altitude", location.hasAltitude() ? location.getAltitude() : JSONObject.NULL);
+        if (Build.VERSION.SDK_INT >= 26 && location.hasVerticalAccuracy()) {
+            obj.put("altitudeAccuracy", location.getVerticalAccuracyMeters());
+        } else {
+            obj.put("altitudeAccuracy", JSONObject.NULL);
+        }
+        // In addition to mocking locations in development, Android allows the
+        // installation of apps which have the power to simulate location
+        // readings in other apps.
+        obj.put("simulated", location.isFromMockProvider());
+        obj.put("speed", location.hasSpeed() ? location.getSpeed() : JSONObject.NULL);
+        obj.put("bearing", location.hasBearing() ? location.getBearing() : JSONObject.NULL);
+        obj.put("time", location.getTime());
+        return obj;
+    }
 }
\ No newline at end of file
